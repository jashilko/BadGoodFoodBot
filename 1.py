import telebot
import os
import gettext
from PSQLighter import PSQLighter
from collections import defaultdict
from telebot import types


# –°–∫–∞—á–∏–≤–∞–µ–º –ø–∞–∫–µ—Ç —É—Ç–∏–ª–∏—Ç –¥–ª—è –≤–∏–Ω–¥—ã https://mlocati.github.io/articles/gettext-iconv-windows.html
# 1. –ó–∞–ø—É—Å–∫ xgettext mary.py ‚Üí –°–æ–∑–¥–∞–µ—Ç—Å—è —Ñ–∞–π–ª .po - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π
# 2. –ó–∞–ø—É—Å–∫ msgfmt mary.po ‚Üí —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ñ–∞–π–ª .mo - –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —á—Ç–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–æ–π
# 3. –°—Ç–∞—Ç—å—è https://phrase.com/blog/posts/translate-python-gnu-gettext/


el = gettext.translation('1', localedir='locales', languages=['ru'])
el.install()

_ = el.gettext

token = os.environ['tg_token']

ZERO, START, PHOTO, RATE, CATEGORY, DESCR, FINISH = range(7)
USER_STATE = defaultdict(lambda: START)

db_worker = PSQLighter()

# –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_state(message):
    return USER_STATE[message.chat.id]


# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_state(message, state):
    USER_STATE[message.chat.id] = state


# –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
def create_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    b1 = types.InlineKeyboardButton(text='üí© ' + _('Shit'), callback_data='shit')
    b2 = types.InlineKeyboardButton(text=_('Amazing') + ' üòª', callback_data='good')
    keyboard.add(b1, b2)
    return keyboard


bot = telebot.TeleBot(token)

# –ü—Ä–∏—Å–ª–∞–ª–∏ —Ü–∏—Ñ—Ä—É. –í—ã–≤–æ–¥–∏–º top –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
@bot.message_handler(func=lambda message: message.text.isdigit())
@bot.message_handler(commands=['list'])
def handle_digit(message):
    if message.text.isdigit():
        countt = int(message.text)
    else:
        countt = 5
    answers = db_worker.get_lasts(message)
    if len(answers) == 0:
        bot.send_message(chat_id=message.chat.id, text=_('No records in the database'))
    elif message.text.isdigit():
        if countt > len(answers):
            bot.send_message(chat_id=message.chat.id, text='–í –±–∞–∑–µ —Ç–æ–ª—å–∫–æ  ' + str(len(answers)) + ' –æ—Ü–µ–Ω–æ–∫: ')
        else:
            bot.send_message(chat_id=message.chat.id, text='–í—ã–≤–æ–∂—É ' + message.text + ' –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ü–µ–Ω–æ–∫: ')
    else:
        bot.send_message(chat_id=message.chat.id, text='–í—ã–≤–æ–∂—É '+ str(len(answers)) + ' –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ü–µ–Ω–æ–∫. –î–ª—è –¥—Ä—É–≥–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É: ')

    i = 1
    for ans in answers:
        if ans["score"] == 1:
            score = " –û—Ü–µ–Ω–∫–∞: –û—Ö—É–µ–Ω–Ω–æ "
        elif ans["score"] == -1:
            score = " –û—Ü–µ–Ω–∫–∞: –ì–æ–≤–Ω–æ "
        else:
            score = " "
        if ans["descr"] is None:
            descr = ""
        else:
            descr = "–û–ø–∏—Å–∞–Ω–∏–µ: " + ans["descr"]
        if ans["cat"] is None:
            cat = " "
        else:
            cat = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: #" + ans["cat"]
        if ans["foto_link"] is not None:
            emo = '‚¨á'
        else:
            emo = ''
        text = str(i) + ") " + cat + score + descr + "(id=" + str(ans["id"]) + ")" + emo
        bot.send_message(chat_id=message.chat.id, text=text)
        i += 1
        if ans["foto_link"] is not None:
            bot.send_photo(chat_id=message.chat.id,
                       photo=ans["foto_link"])
        update_state(message, START)


# –ü—Ä–∏—Å–ª–∞–ª–∏ —Ç–µ–≥. –í—ã–≤–æ–¥–∏–º top 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ —Ç–µ–≥—É
@bot.message_handler(func=lambda message: message.text[0] == '#')
def handle_sharp(message):
    bot.send_message(chat_id=message.chat.id, text='–í—ã–≤–æ–∂—É 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö ' + message.text)
    answers = db_worker.get_sharp(message)
    i = 1
    for ans in answers:
        if ans["score"] == 1:
            score = " –û—Ü–µ–Ω–∫–∞: –û—Ö—É–µ–Ω–Ω–æ "
        elif ans["score"] == -1:
            score = " –û—Ü–µ–Ω–∫–∞: –ì–æ–≤–Ω–æ "
        else:
            score = " "
        if ans["descr"] is None:
            descr = ""
        else:
            descr = "–û–ø–∏—Å–∞–Ω–∏–µ: " + ans["descr"]
        if ans["cat"] is None:
            cat = " "
        else:
            cat = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: #" + ans["cat"]
        if ans["foto_link"] is not None:
            emo = '‚¨á'
        else:
            emo = ''
        text = str(i) + ") " + cat + score + descr + "(id=" + str(ans["id"]) + ")" + emo
        bot.send_message(chat_id=message.chat.id, text = text)
        i += 1
        if ans["foto_link"] is not None:
            bot.send_photo(chat_id=message.chat.id,
                       photo=ans["foto_link"])
        update_state(message, START)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–∏–ø–∫–∏
@bot.callback_query_handler(func=lambda x: True)
def callback_handler(callback_query):
    message = callback_query.message
    text = callback_query.data
    if text in ('shit', 'good'):
        bot.send_message(chat_id=message.chat.id, text='–£–∫–∞–∂–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ')
        db_worker.set_score(text)
        update_state(message, CATEGORY)
    if text == 'canceldescr':
        bot.send_message(chat_id=message.chat.id, text='Bye!')
        update_state(message, FINISH)

@bot.message_handler(commands=['start'])
def handle_message(message):
    update_state(message, START)
    bot.send_message(chat_id=message.chat.id, text='–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ')
    update_state(message, PHOTO)

@bot.message_handler(commands=['help'])
def handle_message(message):
    name = _("Mary")

    # help = _('–ö–∏–¥–∞–π —Ñ–æ—Ç–æ –µ–¥—ã –∏ –¥–∞–≤–∞–π –æ—Ü–µ–Ω–∫—É. \n ' \
    #        '–ë–æ—Ç –∑–∞–ø–æ–º–Ω–∏—Ç –∏ –ø–æ–∫–∞–∂–µ—Ç, —á—Ç–æ —Ö–æ—Ä–æ—à–æ, –∞ —á—Ç–æ –Ω–µ—Ç. \n ' \
    #        '–ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ —Å—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ü–µ–Ω–æ–∫.\n ' \
    #        '–ù–∞–ø–∏—à–∏ \"#–∫–æ—Ñ–µ\", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ –∫–æ—Ñ–µ')

    # help_en = _('Upload a photo of the food and give an assessment. \n '
    #             'The bot will remember and show what is good and what is not. \n '
    #             'Write a number to output so many recent scores.\n '
    #             'Write \"#coffee\" to get the last 5 entries about coffee')

    help_en = _("This is a help")

    bot.send_message(chat_id=message.chat.id, text=help_en)

# –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Üí –ü—Ä–æ—Å–∏–º —Ñ–æ—Ç–æ.
@bot.message_handler(func=lambda message: get_state(message) == START)
def handle_message(message):
    bot.send_message(chat_id=message.chat.id, text='–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ')
    update_state(message, PHOTO)


# –°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ ‚Üí –ü—Ä–æ—Å–∏–º –æ—Ü–µ–Ω–∫—É
@bot.message_handler(func=lambda message: get_state(message) == PHOTO)
@bot.message_handler(content_types=['photo'])
def handle_message(message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    db_worker.check_exist_client(message.chat)
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ
    if message.content_type == 'photo':
        db_worker.set_photo(message)
    else:
        db_worker.set_descr(message)

    keyboard = types.InlineKeyboardMarkup(row_width=2)
    b1 = types.InlineKeyboardButton(text='üí©' + ' –ì–æ–≤–Ω–æ', callback_data='shit')
    b2 = types.InlineKeyboardButton(text='–û—Ö—É–µ–Ω–Ω–æ ' + 'üòª', callback_data='good')
    keyboard.add(b1, b2)
    bot.send_message(chat_id=message.chat.id, text='–û—Ü–µ–Ω–∏ –µ–¥—É. –°—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–∏ –Ω–µ—Ç, —Ç–æ–ª—å–∫–æ –ø–ª–æ—Ö–æ –∏–ª–∏ —Ö–æ—Ä–æ—à–æ',
                     reply_markup=keyboard)
    update_state(message, RATE)


# –°–æ—Å—Ç–æ—è–Ω–∏–µ: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞ ‚Üí –ü—Ä–æ—Å–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@bot.message_handler(func=lambda message: get_state(message) == RATE)
def handle_message(message):
    bot.send_message(chat_id=message.chat.id, text='–£–∫–∞–∂–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ')
    update_state(message, CATEGORY)


# –°–æ—Å—Ç–æ—è–Ω–∏–µ: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Üí –ü—Ä–æ—Å–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ
@bot.message_handler(func=lambda message: get_state(message) == CATEGORY)
def handle_message(message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    db_worker.set_category(message)
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    b1 = types.InlineKeyboardButton(text='–ù–µ —Ö–æ—á—É', callback_data='canceldescr')
    keyboard.add(b1)
    bot.send_message(chat_id=message.chat.id, text='–ö–∞—Ç–µ–≥–æ—Ä–∏—è #' + message.text +
                                                   ' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –•–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ –æ–ø–∏—Å–∞–Ω–∏—é?', reply_markup=keyboard)
    update_state(message, DESCR)


# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ.
@bot.message_handler(func=lambda message: get_state(message) == DESCR)
def handle_message(message):
    bot.send_message(chat_id=message.chat.id, text='Bye')
    db_worker.set_descr(message)
    update_state(message, FINISH)


@bot.message_handler(commands=['setting'])
def handle_message(message):
    bot.send_message(chat_id=message.chat.id, text='Coming soon')




bot.polling()
